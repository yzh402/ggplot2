

#define my custom upper triangle
#show coefficients with ranged sizes and significance annotations

my_custom_cor <- function(data, mapping, color = I("grey50"), sizeRange = c(2, 3), ...) {

  # get the x and y data to use the other code
  x <- eval(mapping$x, data)
  y <- eval(mapping$y, data)

  ct <- cor.test(x,y)
  sig <- symnum(
    ct$p.value, corr = FALSE, na = FALSE,
    cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
    symbols = c("***", "**", "*", ".", " ")
  )

  r <- unname(ct$estimate)
  rt <- format(r, digits=2)[1]

  # since we can't print it to get the strsize, just use the max size range
  cex <- max(sizeRange)

  # helper function to calculate a useable size
  percent_of_range <- function(percent, range) {
    percent * diff(range) + min(range, na.rm = TRUE)
  }

  # plot the cor value
  ggally_text(
    label = as.character(rt), 
    mapping = aes(),
    xP = 0.5, yP = 0.5, 
    size = I(percent_of_range(cex * abs(r), sizeRange)),
    color = color,
    ...
  ) + 
    # add the sig stars
    geom_text(
      aes_string(
        x = 0.8,
        y = 0.8
      ),
      label = sig, 
      size = I(cex),
      color = color,
      ...
    ) + 
    # remove all the background stuff and wrap it with a dashed line
    theme_classic() + 
    theme(
      panel.background = element_rect(
        color = color, 
        linetype = "dashed"
      ), 
      axis.line = element_blank(), 
      axis.ticks = element_blank(), 
      axis.text.y = element_blank(), 
      axis.text.x = element_blank()
    )
}

#define my custom lower triangle
#add a smoother to data for which there is a signficant correlation

my_custom_smooth <- function(data, mapping, ...) {
  p <- ggplot(data = data, mapping = mapping) +
    geom_point(color = I("blue"), size = 2)
    
lmModel <- eval(substitute(lm(y ~ x, data = data), mapping))
  fs <- summary(lmModel)$fstatistic
  pValue <- pf(fs[1], fs[2], fs[3], lower.tail = FALSE)

  if (pValue < 0.05) {
p <- p + geom_smooth(method = "lm", color = I("red"), size = 0.75)
  }
  p
}


#plot correlation matrix

pm <- ggpairs(
  df, 
  upper = list(continuous = my_custom_cor), 
  lower = list(continuous = my_custom_smooth), 
  diag = list(continuous = wrap('diagAxis', labelSize = 5, gridLabelSize = 1.5)),
  axisLabels = "show"
)

#change the font size of the aixs text on the diag panel

pm$showXAxisPlotLabels <- FALSE
pm$showYAxisPlotLabels <- FALSE
pm$xAxisLabels <- NULL
pm$yAxisLabels <- NULL

pm


#plot a correlation matrix with a colored upper panel
#define my custom upper panel

my_custom_cor_color <- function(data, mapping, color = I("black"), sizeRange = c(2, 3), ...) {

  # get the x and y data to use the other code
  x <- eval(mapping$x, data)
  y <- eval(mapping$y, data)

  ct <- cor.test(x,y)
  
sig <- symnum(
    ct$p.value, corr = FALSE, na = FALSE,
    cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
    symbols = c("***", "**", "*", ".", " ")
  )


  r <- unname(ct$estimate)
  rt <- format(r, digits=2)[1]
 cex <- max(sizeRange)

percent_of_range <- function(percent, range) {
    percent * diff(range) + min(range, na.rm = TRUE)
  }


  # plot the cor value
  p <- ggally_text(
   label = as.character(rt), 
   mapping = aes(),
   xP = 0.5, yP = 0.5, 
   size = I(percent_of_range(cex * abs(r), sizeRange)),
   color=color,
   ...
  ) +
  # add the sig stars
    geom_text(
      aes_string(
        x = 0.8,
        y = 0.8
      ),
      label = sig, 
      size = I(cex),
      color = color,
      ...
    ) + 


  theme(
    panel.background=element_rect(fill="white"),
    panel.background = element_rect(color = "black", linetype = "dashed"),
    panel.grid.minor=element_blank(),
    panel.grid.major=element_blank()
  ) 

  corColors <- RColorBrewer::brewer.pal(n = 7, name = "RdYlGn")[2:6]

  if (r <= -0.8) {
    corCol <- corColors[1]
  } else if (r <= -0.6) {
    corCol <- corColors[2]
  } else if (r < 0.6) {
    corCol <- corColors[3]
  } else if (r < 0.8) {
    corCol <- corColors[4]
  } else {
    corCol <- corColors[5]
  }
  p <- p + theme(
    panel.background = element_rect(fill= corCol)
  )

  p
}




